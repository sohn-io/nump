@page "/notifications/add"
@page "/notifications/edit/{existingGuid:guid}"
@inject SaveService<NotificationData> _Save
@inject NavigationManager _Nav
@inject NumpContext _Context
@inject DialogService DialogService

<RadzenTemplateForm data="@newNotification" Submit="@(() => Save())" TItem="NotificationData">
    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Variant="Variant.Filled" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Success" Text="Save" class="sticky" />
    <RadzenDropDown Data="@NotificationTypes" TextProperty="Key" ValueProperty="Value"
        @bind-Value=@newNotification.NotificationType />
    <RadzenTextBox Placeholder="Name" @bind-Value=@newNotification.Name />
    <RadzenStack Orientation="Orientation.Vertical" Gap="10">
        <RadzenTextBox Placeholder="To" @bind-Value=@sendRecipients />
        <RadzenTextBox Placeholder="CC" @bind-Value=@ccRecipients />
        <RadzenTextBox Placeholder="BCC" @bind-Value=@bccRecipients />
    </RadzenStack>

    <RadzenTextBox Placeholder="Subject" @bind-Value=@newNotification.Subject />
    <RadzenStack Orientation="Orientation.Horizontal" Gap="10" AlignItems="AlignItems.Center">
        <RadzenRadioButtonList @bind-Value=@newNotification.Type TValue="string">
            <Items>
                <RadzenRadioButtonListItem Text="Plain Text" Value="@("Text")" />
                <RadzenRadioButtonListItem Text="HTML" Value="@("HTML")" />
            </Items>
        </RadzenRadioButtonList>
        <RadzenButton Click="@(() => ShowVariableInfo())" Text="Variable Info" Variant="Variant.Text"
            Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>

    @if (newNotification.Type == "HTML")
    {
        <RadzenHtmlEditor @bind-Value=@newNotification.Body style="min-height: 300px;" />
    }
    @if (newNotification.Type == "Text")
    {
        <RadzenTextArea @bind-Value=@newNotification.Body style="min-height: 300px;" />
    }
</RadzenTemplateForm>


@code {

    [Parameter]
    public Guid? existingGuid { get; set; }

    NotificationData newNotification = new NotificationData()
        {
            Type = "HTML"
        };
    Dictionary<string, int> NotificationTypes = new Dictionary<string, int>()
{
{"Task Completed", 1},
{"User Created", 2},
{"User Updated", 3}
};
    string sendRecipients = String.Empty;
    string ccRecipients = String.Empty;
    string bccRecipients = String.Empty;


    private async Task Save()
    {
        newNotification.SendRecipientsList = sendRecipients.Split(';').ToList();
        if (ccRecipients == "")
        {
            newNotification.CcRecipientsList = null;
        }
        else
        {
            newNotification.CcRecipientsList = ccRecipients.Split(';').ToList();
        }
        if (bccRecipients == "")
        {
            newNotification.BccRecipientsList = null;
        }
        else
        {
            newNotification.BccRecipientsList = bccRecipients.Split(';').ToList();
        }

        await _Save.HandleSave(newNotification);
        _Nav.NavigateTo("/notifications");

    }
    public async Task ShowVariableInfo()
    {
        DialogService.OpenSideAsync<VariableInfo>("Variable Info", options: new SideDialogOptions
            {
                CloseDialogOnOverlayClick = true,
                Position = DialogPosition.Right,
                ShowMask = true,
                Width = "25%"
            });
    }
    protected override async Task OnInitializedAsync()
    {
        if (existingGuid != null)
        {
            var existingNotification = await _Context.Notifications.Where(x => x.Guid == existingGuid).FirstOrDefaultAsync();
            if (existingNotification != null)
            {
                newNotification = existingNotification;
                sendRecipients = existingNotification.SendRecipientsList != null ? String.Join(";",
                existingNotification.SendRecipientsList) : String.Empty;
                ccRecipients = existingNotification.CcRecipientsList != null ? String.Join(";", existingNotification.CcRecipientsList) :
                String.Empty;
                bccRecipients = existingNotification.BccRecipientsList != null ? String.Join(";",
                existingNotification.BccRecipientsList) : String.Empty;
            }

        }
    }

}
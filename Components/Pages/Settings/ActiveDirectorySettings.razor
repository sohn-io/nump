@inject NumpContext _context
@inject PasswordService _pw



<RadzenTextBox @bind-Value="domain" Placeholder="Domain" Style="width: 100%;" />

<RadzenTextBox @bind-Value="username" Placeholder="Username" Style="width: 100%;" />

<RadzenPassword @bind-Value="password" Placeholder="Password" Style="width: 100%;" />
<RadzenButton Variant="Variant.Text" Icon="Save" Click="@Submit" />



@code {

private Setting? setting = null;
string domain;
string username;
string password;

    private async Task Submit()
    {
        Dictionary<string, string> adUserSettings = new Dictionary<string, string>()
            {
                {"domain", domain},
                {"username", username},
                {"password", await _pw.EncryptStringToBase64_Aes(password)}

            };
        if (setting != null)
        {
            setting.Data = JsonSerializer.Serialize(adUserSettings);
            _context.Update(setting);
        }
        else
        {
            setting = new Setting()
            {
                SettingName = "ActiveDirectory",
                Data = JsonSerializer.Serialize(adUserSettings)
            };
            _context.Settings.Add(setting);
        }
        await _context.SaveChangesAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        setting = await _context.Settings
            .Where(s => s.SettingName == "ActiveDirectory")
            .FirstOrDefaultAsync();
        if (setting != null)
        {
            var data = JsonSerializer.Deserialize<Dictionary<string, string>>(setting.Data);
            domain = data["domain"];
            username = data["username"];
            password = await _pw.DecryptStringFromBase64_Aes(data["password"]);
        }

        

    }
    
}
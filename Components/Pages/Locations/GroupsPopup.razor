@inject DialogService dialogService

<RadzenFormField Variant="Variant.Outlined" style="box-sizing: border-box; margin-left: 16px; width: calc(100% - 32px);"
    class="rz-mb-4">
    <Start>
        <RadzenIcon Icon="search" />
    </Start>
    <ChildContent>
        <RadzenTextBox @bind-Value="@searchValue" @oninput=@Search />
    </ChildContent>
</RadzenFormField>

<RadzenDataList Data="@viewableGroups" AllowPaging=@allowPaging PageSize="10" style="padding: 0 !important;" @ref="radzenDataList" AllowVirtualization="true"
    class="nopadding-data-list">
    <Template>
        @{
            string cssClass = "clickable-div";

            if (selectedOptions.Contains(context))
            {
                cssClass = "clickable-div div-selected";
            }
            <div @onclick="(() => AddToSelection(context))"
                class=@cssClass>
                <RadzenStack Orientation="Orientation.Vertical" Gap="0" class="rz-p-5">
                    <RadzenText TextStyle="TextStyle.DisplayH6">@context.Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline">@context.CanonicalName</RadzenText>
                </RadzenStack>
            </div>
        }

    </Template>

</RadzenDataList>
<RadzenButton Click="(() => SubmitSelection())" Icon="Save" />
@code {
    [Parameter]
    public HashSet<ADObjectMap> groups { get; set; }

    public HashSet<ADObjectMap> viewableGroups { get; set; }

    [Parameter]
    public HashSet<ADObjectMap> selectedOptions {get; set;} = new HashSet<ADObjectMap>();
    string searchValue;

    RadzenDataList<ADObjectMap> radzenDataList {get; set;}
    
    bool allowPaging = true;

    private void AddToSelection(ADObjectMap selectedOption)
    {
        if (selectedOptions.Contains(selectedOption))
        {
            selectedOptions.Remove(selectedOption);
        }
        else
        {
            selectedOptions.Add(selectedOption);
        }
    }

    private void SubmitSelection()
    {
        dialogService.Close(selectedOptions);
    }
    private void Search(ChangeEventArgs e)
    {
        searchValue = e.Value as string;
        if (searchValue == null || searchValue == "")
        {
            allowPaging = true;
            viewableGroups = groups.OrderBy(x => x.Name).ToHashSet<ADObjectMap>();
        }
        else
        {
            viewableGroups = groups.Where(x => x.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase)).ToHashSet<ADObjectMap>();
            allowPaging = false;
        }

    }
    protected override async Task OnInitializedAsync()
    {
        viewableGroups = groups.OrderBy(x => x.Name).ToHashSet<ADObjectMap>();
    }
}
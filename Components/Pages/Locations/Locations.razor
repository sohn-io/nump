@page "/locations"
@inject NumpContext _Context
@inject NavigationManager _Nav
<RadzenRow Gap="15">
    @foreach (LocationMap location in currentLocations)
    {
        <RadzenColumn SizeXS="12" SizeMD="3" SizeLG="3" SizeXL="2" class="h-100">
            <RadzenCard style="border-radius: 10px; height: 450px; display: flex; flex-direction: column; position: relative;"
                class="rz-shadow-4">
                <RadzenText Text="@location.name" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" />


                <!-- Add a wrapper for the bottom right button -->
                <div style="margin-top: auto; align-self: flex-end; position: absolute; bottom: 10px; right: 10px;">
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="edit" Variant="Variant.Outlined"
                        Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                        Click="@(args => EditRow(location))" @onclick:stopPropagation="true" />

                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Outlined"
                        Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                        Click="@(args => DeleteRow(location))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </div>
            </RadzenCard>
        </RadzenColumn>
    }
        <RadzenColumn SizeXS="12" SizeMD="3" SizeLG="2" SizeXL="2" class="h-100">
            <RadzenCard Variant="Variant.Outlined" style="border-radius: 10px; height: 450px; display: flex; flex-direction: column; position: relative; padding: 0% !important;"
                class="rz-shadow-4">
            <RadzenButton Icon="add_circle" class="w-100 h-100 big-button" Size="ButtonSize.Large"ButtonStyle="ButtonStyle.Light" Variant="Variant.Text" Click="AddNew" style="padding: 16px !important"/>
            </RadzenCard>
        </RadzenColumn>
</RadzenRow>
@code {
    RadzenDataList<LocationMap> locationmapgrid;
    List<LocationMap> currentLocations = new List<LocationMap>();

    void AddNew()
    {
        _Nav.NavigateTo("/locations/add");
    }
    public async Task<List<LocationMap>> GetCurrentLocationsAsync()
    {
        return await _Context.LocationMaps.ToListAsync();
    }
    async Task DeleteRow(LocationMap location)
    {
        if (currentLocations.Contains(location))
        {
            _Context.Remove<LocationMap>(location);

            _Context.SaveChanges();

            currentLocations = await GetCurrentLocationsAsync();
        }
        else
        {
            await locationmapgrid.Reload();
        }
    }
    private void EditRow(LocationMap location)
    {
        _Nav.NavigateTo($"/locations/edit/{location.Guid}");
    }
    protected override async Task OnInitializedAsync()
    {
        currentLocations = await GetCurrentLocationsAsync();
    }
}
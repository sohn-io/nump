@page "/locations/add"
@page "/locations/edit/{existingGuid:guid}"
@inject NumpContext _Context
@inject NavigationManager _Nav
@inject NotificationService NotificationService
@inject UserService _user
@inject DialogService DialogService
@using CsvHelper
@using CsvHelper.Configuration
@using System.Text
@using nump.Components.Pages.Ingest


<RadzenButton ButtonType="ButtonType.Submit" Icon="save" Variant="Variant.Filled" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Success" Text="Save" class="sticky" Click="@(() => Save())" />

<RadzenRow>

    <RadzenColumn SizeXS="12" SizeMD="6" SizeLG="4">
        <RadzenRow>

            <RadzenColumn SizeXS="12" SizeMD="6">
                <RadzenUpload Change="@(e => HandleFileSelected(e))" Multiple="false" class="rz-mb-4" @ref="RadzenUpload" ChooseText="Upload Template"  />
            </RadzenColumn>
        </RadzenRow>
    </RadzenColumn>
    <RadzenColumn SizeXS="12" SizeMD="6">
        <RadzenButton Click="@(() => AddNewLocation())" Icon="add" Variant="Variant.Text"
            Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Light" />
        <RadzenButton Click="@(() => DeleteAllLocations())" Icon="delete" Variant="Variant.Text"
            Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Danger"  />
    </RadzenColumn>
</RadzenRow>


<RadzenTemplateForm TItem="LocationMap" Data=@newLocation Submit="@(() => Save())">
    <RadzenRow>
        <RadzenColumn SizeXS="12" SizeMD="6" SizeLG="4">
            <OptionsList Title="General" Icon="settings">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="10" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenLabel Component="LocName" Text="Location Name" />
                        <RadzenTextBox @bind-value="@newLocation.Name"  Name="LabelBox" />
                    </RadzenStack>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn SizeXS="12" SizeMD="4" SizeLG="3">
                            <RadzenLabel Text="Default OU" Component="DefaultOU" />
                        </RadzenColumn>
                        <RadzenColumn SizeXS="12" SizeMD="8" SizeLG="9">                        
                            <RadzenCard Style="box-sizing: border-box; height: 50px; display: flex; align-items: center; border: var(--rz-input-border); width: auto;" Variant="Variant.Flat">
                                @{
                                    string? ouName = string.IsNullOrEmpty(newLocation.DefaultLocation) || !Guid.TryParse(newLocation.DefaultLocation, out Guid parsedGuid)
                                        ? null
                                        : ous.Where(x => x.OUGuid == parsedGuid)
                                             .Select(x => x.Name)
                                             .FirstOrDefault();
                                    if (ouName != null)
                                    {
                                        <RadzenText >@ouName </RadzenText>
                                    }

                                }
                                @if (loading)
                                {
                                    <span class="loader" style="margin-left:auto;"></span>
                                }
                                else
                                {
                                    <RadzenButton Variant="Variant.Text" ButtonStyle="ButtonStyle.Light" Text=". . ." Style="margin-left:auto; padding: 0;" Click="@(() => OpenOUDialog(locationMap: newLocation))"></RadzenButton>

                                }
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn SizeXS="12" SizeMD="4" SizeLG="3">
                            <RadzenLabel Text="Default Groups" Component="DefaultLoc" />
                        </RadzenColumn>
                        <RadzenColumn SizeXS="12" SizeMD="8" SizeLG="9">
                        <RadzenCard Style="height: 50px; display: flex; align-items: center; border: var(--rz-input-border); width: auto;" Variant="Variant.Flat">
                            @{
                                if (newLocation.DefaultGroups != null)
                                {
                                    foreach (Guid defaultGroups in newLocation.DefaultGroupList.Take(3))
                                    {
                                        string? groupName = string.IsNullOrEmpty(newLocation.DefaultGroups)
                                            ? null
                                            : groups.Where(x => x.OUGuid == defaultGroups)
                                                 .Select(x => x.Name)
                                                 .FirstOrDefault();
                                        if (groupName != null)
                                        {
                                            string cssClass = "rz-mr-2 rz-p-1";
                                            <RadzenCard style="background-color: var(--rz-body-background-color);" class="@cssClass">
                                                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText class="group-text" title="@groupName" >@groupName</RadzenText>
                                                </RadzenRow>
                                            </RadzenCard>
                                        }
                                    }

                                }

                            }
                            <RadzenRow style="margin-left: auto;" AlignItems="AlignItems.Center">
                            @if (newLocation.DefaultGroupList != null && newLocation.DefaultGroupList.Count() > 3)
                                    {
                                        int count = newLocation.DefaultGroupList.Count() - 3;
                                        <RadzenText>+@count</RadzenText>
                                    }
                                @if (loading)
                                {
                                    <span class="loader"></span>
                                }
                                else
                                {
                                    <RadzenButton Variant="Variant.Text" ButtonStyle="ButtonStyle.Light" Text=". . ." Style="padding: 0;" Click="@(() => OpenGroups())"></RadzenButton>
                                }
                            </RadzenRow>
                        </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </OptionsList>
        </RadzenColumn>
        <RadzenColumn SizeXS="12" SizeMD="6">

            <RadzenDataList Data="@newLocationList"  @ref="datalist" class="location-data-list">
                <Template Context="location">
                        <RadzenRow RowGap="10">
                            <RadzenColumn SizeXS="12" SizeSM="6" SizeLG="5">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenText Text="Location Value" />
                                    <RadzenTextBox  @bind-Value=@location.SourceColumnValue style="height: 50px;"/>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeSM="6" SizeLG="5">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenText Text="AD OU (GUID)" Component="ADOU" />
                                        <RadzenCard Style="height: 50px; display: flex; align-items: center; border: var(--rz-input-border);" Variant="Variant.Flat">
                                            @{
                                                string? ouName = string.IsNullOrEmpty(location.AdOUGuid) || !Guid.TryParse(location.AdOUGuid, out Guid parsedGuid)
                                                    ? null
                                                    : ous.Where(x => x.OUGuid == parsedGuid)
                                                         .Select(x => x.Name)
                                                         .FirstOrDefault();
                                                if (ouName != null)
                                                {
                                                    @ouName
                                                }

                                            }
                                            @if (loading)
                                            {
                                                <span class="loader" Style="margin-left:auto;"></span>   
                                            }
                                            else
                                            {
                                                <RadzenButton Variant="Variant.Text" ButtonStyle="ButtonStyle.Light" Text=". . ." Style="margin-left:auto; padding: 0;" Click="@(() => OpenOUDialog(location))"></RadzenButton>
                                            }
                                        </RadzenCard>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="12" SizeMD="1">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenText Text="Actions" style="margin-left: auto; visibility: hidden;"/>
                                    <RadzenButton Click="@(() => Delete(location))" Icon="delete" Variant="Variant.Text"
                                    Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Danger" class="loc-delete-button" />
                                </RadzenStack>

                            </RadzenColumn>
                        </RadzenRow>
                </Template>

            </RadzenDataList>
        </RadzenColumn>
    </RadzenRow>
</RadzenTemplateForm>
@code {

    [Parameter]
    public Guid? existingGuid { get; set; }

    RadzenDataList<Location> datalist;

    RadzenUpload RadzenUpload;

    private LocationMap newLocation = new LocationMap()
    {
        LocationList = new List<Location>()
        {
            new Location()
        }
    };

    private List<Location> newLocationList = new List<Location>()
    {
        new Location()
    };

    private List<string> columnNames = new List<string>();
    
    bool loading = false;
    string selectedLocationColumnName;
    string selectedGuidColumnName;

    List<string>? prefillColumnValues = new List<string>();
    List<string>? prefillGuidColumnValues = new List<string>();

    private List<dynamic> currentCsv = new List<dynamic>();
    
    HashSet<ADObjectMap> ous = new HashSet<ADObjectMap>();
    HashSet<ADObjectMap> groups = new HashSet<ADObjectMap>();

    private async Task LoadLocations()
    {
        if (prefillColumnValues.Count() != 0 )
        {
            prefillColumnValues.Clear();
        }
        foreach(IDictionary<string, object> csvLine in currentCsv)
        {
            var values = csvLine.Where(x => x.Key == selectedLocationColumnName).Select(x => x.Value.ToString()).ToList();
            if (values != null)
            {
                prefillColumnValues.AddRange(values);
            }
        }
        prefillColumnValues = prefillColumnValues.Distinct().OrderBy(x => x).ToList();

        newLocationList.Clear();
        foreach (string value in prefillColumnValues)
        {
            newLocationList.Add(new Location {
                SourceColumnValue = value
            });

        }
        RadzenUpload.ClearFiles();
         }

    // Handle file selection and read it as a string
    private async Task HandleFileSelected(UploadChangeEventArgs e)
    {
        var file = e.Files.First().Source;
        using (var stream = new MemoryStream())
        {
            // Read the file into a memory stream
            await file.OpenReadStream().CopyToAsync(stream);

            // Convert the byte array to string (assuming UTF-8 encoding)
            var fileContent = Encoding.UTF8.GetString(stream.ToArray());

            // Parse the CSV string using CSVHelper
            using (var reader = new StringReader(fileContent))
            using (var csv = new CsvHelper.CsvReader(reader, new
            CsvConfiguration(System.Globalization.CultureInfo.InvariantCulture)))
            {
                // Read the CSV records
                currentCsv = csv.GetRecords<dynamic>().ToList();
                if (columnNames.Count() != 0)
                {
                    columnNames.Clear();
                    selectedLocationColumnName = "";
                }
                foreach (IDictionary<string, object> csvLine in currentCsv)
                {
                    columnNames.AddRange(csvLine.Keys.ToList());
                }
                columnNames = columnNames.Distinct().ToList();
                
                RadzenUpload.ClearFiles();

                var result = await DialogService.OpenAsync("Select Location Column", ds =>
                @<RadzenStack Gap="1.5rem">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenStack Orientation="Orientation.Horizontal">
                             <RadzenDropDown TValue="string" Data="@columnNames" Multiple="false" @bind-Value="@selectedLocationColumnName" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            <RadzenButton Text="Load" Click="() => ds.Close(true)" Style="width: 80px;" />
                            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>);

                if (result == true)
                {
                    await LoadLocations();
                }

            }
        }
    }

    private async Task OpenOUDialog(Location? location = null, LocationMap? locationMap = null)
    {
            var result = await DialogService.OpenAsync<OUPopup>($"Select OU",
               new Dictionary<string, object>() { { "OUs", ous } },
               new DialogOptions() 
               {
                   Resizable = true, 
                   Draggable = true,
                   Width = "700px", 
                   Height = "100%",
                   CloseDialogOnEsc = true,
                   CloseDialogOnOverlayClick = true,
                   ContentCssClass = "noscrollbar"
                });
            if (result != null && location != null)
            {
                location.AdOUGuid = result.OUGuid.ToString();
            }
            if (result != null && locationMap != null)
            {
                locationMap.DefaultLocation = result.OUGuid.ToString();
            }

    }
    private async Task OpenGroups()
    {
            Dictionary<string, object> parameters = new Dictionary<string, object>
                {
                    {"groups", groups}
                };
            
            if (newLocation.DefaultGroups != null)
            {
                HashSet<ADObjectMap> selectedOptions = groups
                    .Where(x => newLocation.DefaultGroupList.Contains(x.OUGuid))
                    .ToHashSet<ADObjectMap>();
                parameters.Add("selectedOptions", selectedOptions);
            }
            HashSet<ADObjectMap> result = await DialogService.OpenAsync<GroupsPopup>($"Select Groups",
               parameters,
               new DialogOptions() 
               {
                   Resizable = true, 
                   Draggable = true,
                   Width = "700px", 
                   Height = "100%",
                   CloseDialogOnEsc = true,
                   CloseDialogOnOverlayClick = true,
                   ContentCssClass = "noscrollbar"
                });
            if (result != null)
            {
                    newLocation.DefaultGroupList = result.Select(x => x.OUGuid).ToList();
            }

    }
    // Method to add a new location to the list
    private async Task AddNewLocation()
    {
        newLocationList.Add(new Location());
    }
    private async Task DeleteAllLocations()
    {
        var result = await DialogService.OpenAsync("Delete All Locations?", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>, new DialogOptions() { CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });
        if (result == true)
        {
            newLocationList = new List<Location>()
            {
                new Location()
            }; 
        }

    }
    public async Task Delete(Location location)
    {
        newLocationList.Remove(location);
    }
    public async Task Save()
    {
        newLocationList.RemoveAll(x => x.AdOUGuid == null && x.SourceColumnValue == null);
        if (newLocationList.GroupBy(x => x.SourceColumnValue).Where(x => x.Count() > 1).Count() != 0)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Duplicate Values", Detail = "Unique File Values only!", Duration = 4000 });
            return;
        }
        if (newLocationList.Any(x => x.SourceColumnValue == null || x.AdOUGuid == null))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Empty Values", Detail = "Empty Values Afoot", Duration = 4000 });
            return;
        }
        newLocation.LocationList = newLocationList;
        if (_Context.LocationMaps.Any(e => e.Guid == newLocation.Guid))
        {
            _Context.Update<LocationMap>(newLocation);
        }
        else
        {
            await _Context.AddAsync(newLocation);

        }
        await _Context.SaveChangesAsync();
        _Nav.NavigateTo("/locations");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loading = true;
            await InvokeAsync(StateHasChanged);

                try
                {
                    Dictionary<string, string> lookups = new Dictionary<string, string>()
                    {
                        {"objectClass", "organizationalUnit"}
                    };
                    ous = await GetADOBjects(lookups);
                    lookups = new Dictionary<string, string>()
                    {
                        {"objectClass", "group"}
                    };

                    groups = await GetADOBjects(lookups);
                }
                catch
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Error Loading AD Objects", Duration = 4000 });
                }
        }
            loading = false;
            await InvokeAsync(StateHasChanged);

    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (existingGuid != null)
        {
            var existingLocationMap = await _Context.LocationMaps.Where(x => x.Guid == existingGuid).FirstOrDefaultAsync();
            if (existingLocationMap != null)
            {
                newLocation = existingLocationMap;
                newLocationList = existingLocationMap.LocationList;
                
            }
            else
            {
                _Nav.NavigateTo("/locations/add");
            }
        }


    }

    public async Task<HashSet<ADObjectMap>> GetADOBjects(Dictionary<string, string> lookups)
    {
        string groupLdap = await _user.BuildLdapString(lookups);
        
        List<DirectoryEntry> groupObjects = await _user.FindUser(ldapFilter: groupLdap);
        HashSet<ADObjectMap> returnItems = new HashSet<ADObjectMap>();
        foreach (DirectoryEntry group in groupObjects)
        {
            byte[] objectGuidByteArray = (byte[])group.Properties["objectGuid"].Value;
            Guid objectGuid = new Guid(objectGuidByteArray);
            // Get the Distinguished Name (DN) of the object
            string distinguishedName = group.Properties["distinguishedName"].Value.ToString();
            // Convert DN to Canonical Name format
            string canonicalName = ConvertDistinguishedNameToCanonical(distinguishedName);
            returnItems.Add(new ADObjectMap()
            {
                OUGuid = objectGuid,
                CanonicalName = canonicalName,
                Name = group.Name.Replace("OU=", "").Replace("CN=", "")
            });
        }
        return returnItems;
    }
    public static string ConvertDistinguishedNameToCanonical(string distinguishedName)
    {
        // Split the DN by commas (e.g., CN=John Doe,OU=Employees,DC=example,DC=com)
        var parts = distinguishedName.Split(',')
            .Select(part => part.Trim())
            .Where(part => !string.IsNullOrEmpty(part))
            .ToArray();

        // Extract CN and DC values separately
        var cnPart = parts.FirstOrDefault(p => p.StartsWith("CN="))?.Substring(3); // Extract CN value
        var ouParts = parts.Where(p => p.StartsWith("OU=")).Select(p => p.Substring(3)).ToArray(); // Extract OU values
        var dcParts = parts.Where(p => p.StartsWith("DC=")).Select(p => p.Substring(3)).ToArray(); // Extract DC values

        // Combine DC parts into the domain name (e.g., "example.com")
        var domainName = string.Join(".", dcParts);
        // Combine the OU and CN parts to form the full canonical name
        var canonicalName = string.Join("/", ouParts.Concat(new[] { cnPart }).Where(x => x != null));

        // Return the canonical name in the format "domain.com/OU1/OU2/.../CN"
        return $"{domainName}/{canonicalName}";
    }


}